#!/usr/bin/python3

# Import all relevant libraries
import argparse
import os
import pickle
import matplotlib.pyplot as plt


# Function to produce a PAE plot from the pkl file produced by AlphaFold - N.B code taken from AlphaFold CoLab
def pae_plotter(pickle_input, output):
    # Load as a dictionary from pickle file

    data = open(pickle_input, 'rb')
    prediction_result = pickle.load(data)
    data.close()

    # Generate dictionary for predicted aligned error results from pkl file
    pae_outputs = {'protein': (
        prediction_result['predicted_aligned_error'],
        prediction_result['max_predicted_aligned_error']
    )}

    # Output file for the plot
    pae_output = f'{output}/pae.png'

    # Plot predicted align error results for each aligned residue
    pae, max_pae = list(pae_outputs.values())[0]
    fig = plt.figure()  # generate figure
    fig.set_facecolor('white')  # color background white
    plt.imshow(pae, vmin=0., vmax=max_pae)  # plot pae
    plt.colorbar(fraction=0.46, pad=0.04)  # create color bar
    plt.title('Predicted Aligned Error')  # plot title
    plt.xlabel('Scored residue')  # plot x-axis label
    plt.ylabel('Aligned residue')  # plot y-axis label

    plt.savefig(pae_output, dpi=1000, bbox_inches='tight')  # save plot to output directory


# Function to create a PyMOL session from the pdb file generated by AlphaFold
def protein_painter(pdb_input, output):
    # File path for the PyMol session
    session_path = f'{output}/pLDDT.pse'

    # Terminal Command to open pdb file, color protein by pLDDT (b-factor) and save the session in the output directory
    pymol_command = f'PyMol -cq {str(pdb_input)} -d "spectrum b, yellow_green_blue; save {session_path}"'

    # Run terminal command
    os.system(pymol_command)


def cmd_lineparser():
    parser = argparse.ArgumentParser(description='Generate a predicted alignment error plot and pLDDT coloured structure from your AlphaFold results!')

    # Get pdb structure path
    parser.add_argument('-p', '--pdb', metavar='arg', type=str, action='store', help='path to pdb file',
                        default=None)

    # Get pkl file path
    parser.add_argument('-l', '--pkl', metavar='arg', type=str, action='store', help='path to pkl file',
                        default=None)

    # Get output directory
    parser.add_argument('-o', '--output', metavar='arg', type=str, action='store',
                        help='directory to store outputs', default=None)

    # Parse arguments
    args = parser.parse_args()

    if args is None:
        parser.error('help')
    if args.pkl is None and args.pdb is None:
        parser.error('please provide input(s)')

    if args.pdb is not None:
        if not args.pdb.endswith('.pdb'):
            parser.error('ERROR: --pdb requires pdb structure')

    if args.pkl is not None:
        if not args.pkl.endswith('.pkl'):
            parser.error('ERROR: --pkl requires pkl file')

    if args.output is None:
        parser.error('ERROR: Please provide output directory')

    if not os.path.isdir(args.output):
        parser.error('ERROR: Output directory not found')

    return args


def main():
    args = cmd_lineparser()

    if args.pdb is not None:
        print(' Visualising pLDDT data...')
        protein_painter(args.pdb, args.output)
        print(' pLDDT data visualised')

    if args.pkl is not None:
        print(' plotting predicted alignment error...')
        pae_plotter(args.pkl, args.output)
        print(' predicted alignment error plotted')




# Run analysis
if __name__ == '__main__':
    main()
